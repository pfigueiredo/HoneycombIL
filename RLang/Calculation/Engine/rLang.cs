//Generated by the GOLD Parser Builder
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq.Expressions;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using System.Text.RegularExpressions;

namespace RLang.Calculation.Engine {

    public enum ParserBackend {
        IL, //Compiled to IL with System.Reflection.Emit
        EXEC, //Execution with System.Link.Expressions
        PARSE //Just parse and generate the expression tree
    }

    
    public class rLangParser : MarshalByRefObject {
        private GOLD.Parser parser = new GOLD.Parser();

        private enum SymbolIndex {
            @Eof = 0,                                  // (EOF)
            @Error = 1,                                // (Error)
            @Comment = 2,                              // Comment
            @Newline = 3,                              // NewLine
            @Whitespace = 4,                           // Whitespace
            @Timesdiv = 5,                             // '*/'
            @Divtimes = 6,                             // '/*'
            @Divdiv = 7,                               // '//'
            @Minus = 8,                                // '-'
            @Dollar = 9,                               // '$'
            @Percent = 10,                             // '%'
            @Amp = 11,                                 // '&'
            @Lparen = 12,                              // '('
            @Rparen = 13,                              // ')'
            @Times = 14,                               // '*'
            @Comma = 15,                               // ','
            @Dot = 16,                                 // '.'
            @Div = 17,                                 // '/'
            @Colon = 18,                               // ':'
            @At = 19,                                  // '@'
            @Lbracket = 20,                            // '['
            @Rbracket = 21,                            // ']'
            @Caret = 22,                               // '^'
            @Lbrace = 23,                              // '{'
            @Rbrace = 24,                              // '}'
            @Plus = 25,                                // '+'
            @Lt = 26,                                  // '<'
            @Lteq = 27,                                // '<='
            @Ltgt = 28,                                // '<>'
            @Eq = 29,                                  // '='
            @Gt = 30,                                  // '>'
            @Gteq = 31,                                // '>='
            @And = 32,                                 // AND
            @Else = 33,                                // ELSE
            @End = 34,                                 // END
            @Identifier = 35,                          // Identifier
            @If = 36,                                  // IF
            @Not = 37,                                 // NOT
            @Number = 38,                              // Number
            @Or = 39,                                  // OR
            @Stringliteral = 40,                       // StringLiteral
            @Then = 41,                                // THEN
            @Addexp = 42,                              // <Add Exp>
            @Args = 43,                                // <Args>
            @Assignexp = 44,                           // <Assign Exp>
            @Assigncell = 45,                          // <AssignCell>
            @Assignlist = 46,                          // <AssignList>
            @Assingcolrange = 47,                      // <AssingColRange>
            @Boolexp = 48,                             // <Bool Exp>
            @Cellreference = 49,                       // <CellReference>
            @Colreference = 50,                        // <ColReference>
            @Expression = 51,                          // <Expression>
            @Globalreference = 52,                     // <GlobalReference>
            @Multexp = 53,                             // <Mult Exp>
            @Negateexp = 54,                           // <Negate Exp>
            @Percentexp = 55,                          // <Percent Exp>
            @Powexp = 56,                              // <Pow Exp>
            @Program = 57,                             // <Program>
            @Rangereference = 58,                      // <RangeReference>
            @Rowreference = 59,                        // <RowReference>
            @Singlecolrange = 60,                      // <SingleColRange>
            @Value = 61                                // <Value>
        }

        private enum ProductionIndex {
            @Program = 0,                              // <Program> ::= <AssignList>
            @Program_Eq = 1,                           // <Program> ::= '=' <Bool Exp>
            @Assignlist = 2,                           // <AssignList> ::= <AssignList> <Assign Exp>
            @Assignlist2 = 3,                          // <AssignList> ::= <Assign Exp>
            @Assignexp_Identifier_Eq_Lbrace_Rbrace = 4,  // <Assign Exp> ::= Identifier '=' '{' <Bool Exp> '}'
            @Assignexp_Eq_Lbrace_Rbrace = 5,           // <Assign Exp> ::= <GlobalReference> '=' '{' <Bool Exp> '}'
            @Assignexp_Eq_Lbrace_Rbrace2 = 6,          // <Assign Exp> ::= <AssignCell> '=' '{' <Bool Exp> '}'
            @Assignexp_Eq_Lbrace_Rbrace3 = 7,          // <Assign Exp> ::= <AssingColRange> '=' '{' <Bool Exp> '}'
            @Args_Comma = 8,                           // <Args> ::= <Args> ',' <Bool Exp>
            @Args = 9,                                 // <Args> ::= <Bool Exp>
            @Boolexp_And = 10,                         // <Bool Exp> ::= <Bool Exp> AND <Expression>
            @Boolexp_Or = 11,                          // <Bool Exp> ::= <Bool Exp> OR <Expression>
            @Boolexp_And_Lparen_Rparen = 12,           // <Bool Exp> ::= AND '(' <Args> ')'
            @Boolexp_Or_Lparen_Rparen = 13,            // <Bool Exp> ::= OR '(' <Args> ')'
            @Boolexp_Not = 14,                         // <Bool Exp> ::= NOT <Expression>
            @Boolexp = 15,                             // <Bool Exp> ::= <Expression>
            @Expression_Gt = 16,                       // <Expression> ::= <Expression> '>' <Add Exp>
            @Expression_Lt = 17,                       // <Expression> ::= <Expression> '<' <Add Exp>
            @Expression_Lteq = 18,                     // <Expression> ::= <Expression> '<=' <Add Exp>
            @Expression_Gteq = 19,                     // <Expression> ::= <Expression> '>=' <Add Exp>
            @Expression_Eq = 20,                       // <Expression> ::= <Expression> '=' <Add Exp>
            @Expression_Ltgt = 21,                     // <Expression> ::= <Expression> '<>' <Add Exp>
            @Expression = 22,                          // <Expression> ::= <Add Exp>
            @Addexp_Plus = 23,                         // <Add Exp> ::= <Add Exp> '+' <Mult Exp>
            @Addexp_Minus = 24,                        // <Add Exp> ::= <Add Exp> '-' <Mult Exp>
            @Addexp_Amp = 25,                          // <Add Exp> ::= <Add Exp> '&' <Mult Exp>
            @Addexp = 26,                              // <Add Exp> ::= <Mult Exp>
            @Multexp_Times = 27,                       // <Mult Exp> ::= <Mult Exp> '*' <Pow Exp>
            @Multexp_Div = 28,                         // <Mult Exp> ::= <Mult Exp> '/' <Pow Exp>
            @Multexp = 29,                             // <Mult Exp> ::= <Pow Exp>
            @Powexp_Caret = 30,                        // <Pow Exp> ::= <Pow Exp> '^' <Percent Exp>
            @Powexp = 31,                              // <Pow Exp> ::= <Percent Exp>
            @Percentexp_Percent = 32,                  // <Percent Exp> ::= <Negate Exp> '%'
            @Percentexp = 33,                          // <Percent Exp> ::= <Negate Exp>
            @Negateexp_Minus = 34,                     // <Negate Exp> ::= '-' <Value>
            @Negateexp = 35,                           // <Negate Exp> ::= <Value>
            @Value_Number = 36,                        // <Value> ::= Number
            @Value_If_Lparen_Rparen_Then_End = 37,     // <Value> ::= IF '(' <Bool Exp> ')' THEN <Bool Exp> END
            @Value_If_Lparen_Rparen_Then_Else_End = 38,  // <Value> ::= IF '(' <Bool Exp> ')' THEN <Bool Exp> ELSE <Bool Exp> END
            @Value_If_Lparen_Rparen = 39,              // <Value> ::= IF '(' <Args> ')'
            @Value_Identifier_Lparen_Rparen = 40,      // <Value> ::= Identifier '(' <Args> ')'
            @Value_Identifier_Lparen_Rparen2 = 41,     // <Value> ::= Identifier '(' ')'
            @Value = 42,                               // <Value> ::= <RangeReference>
            @Value2 = 43,                              // <Value> ::= <CellReference>
            @Value3 = 44,                              // <Value> ::= <GlobalReference>
            @Value_Identifier = 45,                    // <Value> ::= Identifier
            @Value_Stringliteral = 46,                 // <Value> ::= StringLiteral
            @Value_Lparen_Rparen = 47,                 // <Value> ::= '(' <Bool Exp> ')'
            @Globalreference_At_Identifier_Dot_Identifier = 48,  // <GlobalReference> ::= '@' Identifier '.' Identifier
            @Globalreference_At_Identifier = 49,       // <GlobalReference> ::= '@' Identifier
            @Rangereference_Lbracket_Rbracket_Colon_Lbracket_Rbracket = 50,  // <RangeReference> ::= <ColReference> '[' <RowReference> ']' ':' <ColReference> '[' <RowReference> ']'
            @Rangereference_Colon = 51,                // <RangeReference> ::= <ColReference> ':' <ColReference>
            @Rangereference_Dollar_Number_Colon_Dollar_Number = 52,  // <RangeReference> ::= <ColReference> '$' Number ':' <ColReference> '$' Number
            @Rangereference = 53,                      // <RangeReference> ::= <SingleColRange>
            @Singlecolrange_Lbracket_Colon_Rbracket = 54,  // <SingleColRange> ::= <ColReference> '[' <RowReference> ':' <RowReference> ']'
            @Cellreference_Lbracket_Rbracket = 55,     // <CellReference> ::= <ColReference> '[' <RowReference> ']'
            @Cellreference_Dollar_Identifier = 56,     // <CellReference> ::= '$' Identifier
            @Assingcolrange_Lbracket_Colon_Rbracket = 57,  // <AssingColRange> ::= <ColReference> '[' <RowReference> ':' <RowReference> ']'
            @Assigncell_Lbracket_Rbracket = 58,        // <AssignCell> ::= <ColReference> '[' <RowReference> ']'
            @Assigncell_Dollar_Identifier = 59,        // <AssignCell> ::= '$' Identifier
            @Colreference_Identifier = 60,             // <ColReference> ::= Identifier
            @Colreference_Dollar_Identifier = 61,      // <ColReference> ::= '$' Identifier
            @Rowreference_Number = 62,                 // <RowReference> ::= Number
            @Rowreference_Minus_Number = 63,           // <RowReference> ::= '-' Number
            @Rowreference_Dollar_Number = 64           // <RowReference> ::= '$' Number
        }

        private SymbolTable globalSymbolTable;
        private int lastLine = 0;
        private int lastColumn = 0;
        private GOLD.Token lastToken = null;

        public bool SaveAssembly { get; set; }

        public SymbolTable GlobalSymbolTable { get { return globalSymbolTable; } }

        public void Setup() {
            var resourceName = "RLang.Calculation.Engine.rLang.egt";
            Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);

            string[] names = Assembly.GetExecutingAssembly().GetManifestResourceNames();

            System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;

            try {
                BinaryReader bReader = new BinaryReader(stream);
                parser.LoadTables(bReader);
            } catch {
                //Will throw on Parse
            }
        }

        public class Result {
            public ParserBackend ResultType { get; set; }
            public ExecutionContext ExecutionContext { get; set; }
            public string DebugView { get; set; }
            public AssemblyBuilder Assembly { get; set; }
            public string Filename { get; set; }
            public Type Main { get; set; } 
            public AppDomain AppDomain { get; set; }
            public object Value { get; set; }
        }

        private Result Compile(rLangExpression exp, ExecutionContext context, ParserBackend backend, SymbolTable localSymbolTabel) {

            //When only a few of us are left, we will feel an irresistible 
            //pull towards a far away land, to fight for the Prize 
            //now lets IL this baby!

            Result result = new Result();

            if (backend == ParserBackend.EXEC || backend == ParserBackend.IL) {

                List<Expression> eList = new List<Expression>();
                List<ParameterExpression> pExpressions = new List<ParameterExpression>();
                var ctxParam = Expression.Parameter(typeof(ExecutionContext), "__context");

                var ret = rLangExpression.CreateLinkExpressionTree(exp, ExpressionType.ANY, eList, pExpressions, ctxParam);

                //pExpressions.Add(ctxParam);

                foreach (var s in localSymbolTabel.Symbols) {
                    if (s.IdentifierType == IdentifierSymbolType.Variable && s.LinqExpression != null)
                        pExpressions.Add((ParameterExpression)s.LinqExpression);
                }

                BlockExpression block = Expression.Block(pExpressions.ToArray(), eList.ToArray());

                var l = Expression.Lambda(block, ctxParam);

                if (backend == ParserBackend.EXEC) {
                    result.ExecutionContext = context;
                    var cExpression = l.Compile();

                    while (context != null) {
                        try {
                            result.Value = cExpression.DynamicInvoke(context);
                            context = context.Next;
                        } catch (TargetInvocationException ex) {
                            if (ex.InnerException != null)
                                throw ex.InnerException;
                        }
                    }
                } else if (backend == ParserBackend.IL) {
                    AssemblyName an = new AssemblyName();
                    an.Name = string.Format("rLang{0}", System.Guid.NewGuid().ToString().Replace("-", ""));

                    AppDomain ad = AppDomain.CurrentDomain;

                    AssemblyBuilder ab = ad.DefineDynamicAssembly(an, AssemblyBuilderAccess.RunAndSave, Path.GetTempPath());

                    ab.DefineVersionInfoResource("rLand", "1.2", "", "2016:54334B", "");
                    result.Filename = string.Format("{0}.dll", an.Name);

                    ModuleBuilder mb = ab.DefineDynamicModule(an.Name, result.Filename);
                    TypeBuilder tb = mb.DefineType(string.Format("rLang.Execution.t{0}", an.Name), TypeAttributes.Public | TypeAttributes.Class);

                    MethodBuilder fb = tb.DefineMethod("Exec", MethodAttributes.Public | MethodAttributes.Static,
                        typeof(object), new Type[] { typeof(ExecutionContext) });

                    l.CompileToMethod(fb);
                    result.Main = tb.CreateType();
                    result.Assembly = ab;

                }

            }

            return result;

        }

        public rLangParser.Result Parse(
            string source,
            ParserBackend backend
        ) {
            return Parse(source, backend, null, null);
        }

        public rLangParser.Result Parse(
            string source,
            ParserBackend backend,
            Dictionary<string, MethodInfo> builtInMethods
        ) {
            return Parse(source, backend, null, builtInMethods);
        }

        public rLangParser.Result Parse(
            string source,
            ParserBackend backend,
            ExecutionContext context,
            Dictionary<string, MethodInfo> builtInMethods
        ) {

            if (backend != ParserBackend.IL 
                && backend != ParserBackend.PARSE
                && backend != ParserBackend.EXEC)
                throw new NotImplementedException(
                    string.Format("The only implemented backends are 'PARSE', 'IL' and 'EXEC'. '{0}' is not an option for me at this stage --PF", backend)
                );

            TextReader reader = new StringReader(source);

            GOLD.ParseMessage response;
            bool done;                      
            bool accepted = false;          

            parser.Open(reader);
            parser.TrimReductions = false;   

            object program = null;

            done = false;
            while (!done) {
                response = parser.Parse();

                var position = parser.CurrentPosition();
                this.lastLine = position.Line;
                this.lastColumn = position.Column;
                this.lastToken = parser.CurrentToken();

                switch (response) {
                    case GOLD.ParseMessage.LexicalError:
                        done = true; accepted = false;
                        throw new LexicalErrorException(new LexicalError(this.lastLine, this.lastColumn, this.lastToken.Data.ToString()));
                    case GOLD.ParseMessage.SyntaxError:
                        done = true; accepted = false;
                        throw new SyntaxErrorException(new SyntaxError(
                            this.lastLine, this.lastColumn,
                            this.lastToken.Data.ToString(),
                            this.parser.ExpectedSymbols().Text()
                        ));
                    case GOLD.ParseMessage.Reduction:
                        //I Have to implement this if i want to be able to parse large expressions 
                        //and to avoid stack overflow when going deep into the parse tree, but there is
                        //no need to do this as i'm not expecting to receive 1k+ expressions --PF
                        break;

                    case GOLD.ParseMessage.Accept:
                        //Accepted, lets go an make some IL out of this!
                        program = parser.CurrentReduction;  //The root node!
                        done = true;
                        accepted = true;
                        break;

                    case GOLD.ParseMessage.TokenRead:
                        break;

                    case GOLD.ParseMessage.InternalError:
                        done = true;
                        throw new Exception("Internal Parser Error"); //this is not good... 

                    case GOLD.ParseMessage.NotLoadedError:
                        done = true;
                        throw new Exception("Language tables not loaded"); //:P

                    case GOLD.ParseMessage.GroupError:
                        //GROUP ERROR! Unexpected end of file... blablabla near EOF :D
                        done = true;
                        done = true; accepted = false;
                        throw new SyntaxErrorException(new SyntaxError(
                            this.lastLine, this.lastColumn,
                            this.lastToken.Data.ToString(),
                            this.parser.ExpectedSymbols().Text()
                        ));
                }
            } //while

            rLangParser.Result result = new Result();

            //the question is: how can i every accept a null program? 
            //always check it bacause there are no one way streets.
            if (accepted && program != null) {

                this.globalSymbolTable = new SymbolTable(builtInMethods);
                context = (context != null) ? context : new ExecutionContext();

                SymbolTable localSymbolTabel = this.globalSymbolTable.CreateLocalSymbolTable();

                var exp = CreateObject(program as GOLD.Reduction, localSymbolTabel) as rLangExpression;

                if ((exp as AssignExpression) == null) {

                    AssignExpression aExp = new AssignExpression(
                        localSymbolTabel.GetSymbol("Result", IdentifierSymbolType.GlobalVariable, null, 0, false, 0, 0),
                        exp, localSymbolTabel
                    );

                    exp = aExp;
                }


                if (backend == ParserBackend.IL) {

                    //var domain = AppDomain.CreateDomain("ExecutionDomain", null,
                    //new AppDomainSetup { ApplicationBase = AppDomain.CurrentDomain.SetupInformation.ApplicationBase });

                    result = this.Compile(exp, context, backend, localSymbolTabel);

                } else {
                    result = this.Compile(exp, context, backend, localSymbolTabel);
                }
                

            }

            return result;

        }

        private object CreateObject(object obj, SymbolTable symbolTable) {
            GOLD.Reduction reduction = obj as GOLD.Reduction;
            GOLD.Token token = obj as GOLD.Token;
            if (reduction != null) return CreateObjectFromReduction(reduction, symbolTable);
            if (token != null) return CreateObjectFromToken(token, symbolTable);

            throw new ArgumentException("The parameter 'obj' must be an GOLD.Reduction or a GOLD.Token");
        }

        private object GetTerminal(object obj, SymbolIndex type) {
            var token = obj as GOLD.Token;
            if (token != null) {
                var position = token.Position();
                if (!(token.Data is GOLD.Reduction)) {
                    switch (type) {
                        case SymbolIndex.Identifier:
                            return token.Data.ToString();
                        case SymbolIndex.Number:

                            string defStr = token.Data.ToString();

                            if (defStr[0] == '.') defStr = "0" + defStr;

                            try {
                                //will never receive a ',' in place of a '.' but...
                                return Double.Parse(defStr.Replace(',', '.'), System.Globalization.CultureInfo.InvariantCulture.NumberFormat);
                            } catch {
                                throw new LexicalErrorException(
                                    new LexicalError(position.Line, position.Column, token.Data.ToString())
                                );
                            }

                        case SymbolIndex.Stringliteral:
                            string defStrLit = token.Data.ToString();
                            return defStrLit.Substring(1, defStrLit.Length - 2);
                        default:
                            return null;
                    }


                }
                throw new LexicalErrorException(
                    new LexicalError(position.Line, position.Column, token.Data.ToString())
                );
            }
            throw new LexicalErrorException(
                new LexicalError(0, 0, token.Data.ToString())
            );
        }

        private object CreateObjectFromToken(GOLD.Token token, SymbolTable symbolTable) {

            var position = token.Position();
            this.lastLine = position.Line;
            this.lastColumn = position.Column;

            if (token.Data is GOLD.Reduction)
                return CreateObjectFromReduction(token.Data as GOLD.Reduction, symbolTable);
            else {
                throw new LexicalErrorException(
                    new LexicalError(position.Line, position.Column, token.Data.ToString())
                );
            }
        }

        private object CreateObjectFromReduction(GOLD.Reduction reduction, SymbolTable symbolTable) {
            object result = null;

            switch ((ProductionIndex)reduction.Parent.TableIndex()) {
                case ProductionIndex.Program:
                    // <Program> ::= <AssignList>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Program_Eq:
                    // <Program> ::= '=' <Bool Exp>
                    return CreateObject(reduction[1], symbolTable);

                case ProductionIndex.Assignlist:
                    // <AssignList> ::= <AssignList> <Assign Exp>
                    GOLD.Reduction assignListReduction = reduction[0].Data as GOLD.Reduction;

                    Stack<AssignExpression> expressions = new Stack<AssignExpression>();
                    expressions.Push((AssignExpression)CreateObject(reduction[1], symbolTable));

                    while (assignListReduction != null) {
                        if ((ProductionIndex)assignListReduction.Parent.TableIndex() == ProductionIndex.Assignlist) {
                            expressions.Push((AssignExpression)CreateObject(assignListReduction[1], symbolTable));
                            assignListReduction = assignListReduction[0].Data as GOLD.Reduction;
                        } else {
                            expressions.Push((AssignExpression)CreateObject(assignListReduction[0], symbolTable));
                            assignListReduction = null;
                        }
                    }

                    AssignExpression retExpression = null;
                    AssignExpression aExpression = null;
                    while (expressions.Count > 0) {
                        if (aExpression == null) {
                            aExpression = expressions.Pop();
                            retExpression = aExpression;
                        } else if (expressions.Count > 0) {
                            aExpression.Next = expressions.Pop();
                            aExpression = (AssignExpression)aExpression.Next;
                        }
                    }

                    return retExpression;

                case ProductionIndex.Assignlist2:
                    // <AssignList> ::= <Assign Exp>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Assignexp_Identifier_Eq_Lbrace_Rbrace:
                    // <Assign Exp> ::= Identifier '=' '{' <Bool Exp> '}'
                    SymbolTable localSymbolTable = symbolTable.CreateLocalSymbolTable();
                    return new AssignExpression(
                        localSymbolTable.GetSymbol((string)GetTerminal(reduction[0], SymbolIndex.Identifier),
                            IdentifierSymbolType.Variable, null, 0, false, this.lastLine, this.lastColumn),
                        (rLangExpression)CreateObject(reduction[3], localSymbolTable),
                        localSymbolTable
                    );

                case ProductionIndex.Assignexp_Eq_Lbrace_Rbrace:
                    // <Assign Exp> ::= <GlobalReference> '=' '{' <Bool Exp> '}'
                    localSymbolTable = symbolTable.CreateLocalSymbolTable();
                    return new AssignExpression(
                            (IdentifierSymbol)CreateObject(reduction[0], localSymbolTable),
                            (rLangExpression)CreateObject(reduction[3], localSymbolTable),
                            localSymbolTable
                        );

                case ProductionIndex.Assignexp_Eq_Lbrace_Rbrace2:
                    // <Assign Exp> ::= <AssignCell> '=' '{' <Bool Exp> '}'
                    localSymbolTable = symbolTable.CreateLocalSymbolTable();

                    var identDef = (IdentifierSymbol)CreateObject(reduction[0], localSymbolTable);

                    return new AssignExpression(
                        identDef,
                        (rLangExpression)CreateObject(reduction[3], localSymbolTable),
                        localSymbolTable
                    );

                case ProductionIndex.Assignexp_Eq_Lbrace_Rbrace3:
                    // <Assign Exp> ::= <AssingColRange> '=' '{' <Bool Exp> '}'
                    localSymbolTable = symbolTable.CreateLocalSymbolTable();

                    identDef = (IdentifierSymbol)CreateObject(reduction[0], localSymbolTable);

                    return new AssignExpression(
                        identDef,
                        (rLangExpression)CreateObject(reduction[3], localSymbolTable),
                        localSymbolTable
                    );


                case ProductionIndex.Args_Comma:
                    // <Args> ::= <Args> ',' <Bool Exp>
                    List<rLangExpression> argsList = (List<rLangExpression>)CreateObject(reduction[0], symbolTable);
                    argsList.Add((rLangExpression)CreateObject(reduction[2], symbolTable));
                    return argsList;

                case ProductionIndex.Args:
                    // <Args> ::= <Bool Exp>
                    argsList = new List<rLangExpression>();
                    argsList.Add((rLangExpression)CreateObject(reduction[0], symbolTable));
                    return argsList;

                case ProductionIndex.Boolexp_And:
                    // <Bool Exp> ::= <Bool Exp> AND <Expression>
                    return new BooleanExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        BooleanOperator.AND
                    );

                case ProductionIndex.Boolexp_Or:
                    // <Bool Exp> ::= <Bool Exp> OR <Expression>
                    return new BooleanExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        BooleanOperator.OR
                    );

                case ProductionIndex.Boolexp_And_Lparen_Rparen:
                    // <Bool Exp> ::= AND '(' <Args> ')'
                    return new BooleanExpression(
                        (List<rLangExpression>)CreateObject(reduction[2], symbolTable),
                        BooleanOperator.AND
                    );

                case ProductionIndex.Boolexp_Or_Lparen_Rparen:
                    // <Bool Exp> ::= OR '(' <Args> ')'
                    return new BooleanExpression(
                        (List<rLangExpression>)CreateObject(reduction[2], symbolTable),
                        BooleanOperator.OR
                    );

                case ProductionIndex.Boolexp_Not:
                    // <Bool Exp> ::= NOT <Expression>
                    return new BooleanExpression(
                        (rLangExpression)CreateObject(reduction[1], symbolTable), null,
                        BooleanOperator.NOT
                    );

                case ProductionIndex.Boolexp:
                    // <Bool Exp> ::= <Expression>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Expression_Gt:
                    // <Expression> ::= <Expression> '>' <Add Exp>
                    return new ComparisonExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        ComparisonOperator.GT
                    );

                case ProductionIndex.Expression_Lt:
                    // <Expression> ::= <Expression> '<' <Add Exp>
                    return new ComparisonExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        ComparisonOperator.LT
                    );

                case ProductionIndex.Expression_Lteq:
                    // <Expression> ::= <Expression> '<=' <Add Exp>
                    return new ComparisonExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        ComparisonOperator.LTEQ
                    );

                case ProductionIndex.Expression_Gteq:
                    // <Expression> ::= <Expression> '>=' <Add Exp>
                    return new ComparisonExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        ComparisonOperator.GTEQ
                    );

                case ProductionIndex.Expression_Eq:
                    // <Expression> ::= <Expression> '=' <Add Exp>
                    return new ComparisonExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        ComparisonOperator.EQ
                    );

                case ProductionIndex.Expression_Ltgt:
                    // <Expression> ::= <Expression> '<>' <Add Exp>
                    return new ComparisonExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        ComparisonOperator.NEQ
                    );

                case ProductionIndex.Expression:
                    // <Expression> ::= <Add Exp>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Addexp_Plus:
                    // <Add Exp> ::= <Add Exp> '+' <Mult Exp>
                    return new MathExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        MathOperator.ADD
                    );

                case ProductionIndex.Addexp_Minus:
                    // <Add Exp> ::= <Add Exp> '-' <Mult Exp>
                    return new MathExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        MathOperator.SUBTR
                    );

                case ProductionIndex.Addexp_Amp:
                    // <Add Exp> ::= <Add Exp> '&' <Mult Exp>
                    return new MathExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        MathOperator.CONCATENATE
                    );

                case ProductionIndex.Addexp:
                    // <Add Exp> ::= <Mult Exp>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Multexp_Times:
                    // <Mult Exp> ::= <Mult Exp> '*' <Pow Exp>
                    return new MathExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        MathOperator.MULT
                    );

                case ProductionIndex.Multexp_Div:
                    // <Mult Exp> ::= <Mult Exp> '/' <Pow Exp>
                    return new MathExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        MathOperator.DIVD
                    );

                case ProductionIndex.Multexp:
                    // <Mult Exp> ::= <Pow Exp>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Powexp_Caret:
                    // <Pow Exp> ::= <Pow Exp> '^' <Percent Exp>
                    return new MathExpression(
                        (rLangExpression)CreateObject(reduction[0], symbolTable),
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        MathOperator.POW
                    );

                case ProductionIndex.Powexp:
                    // <Pow Exp> ::= <Percent Exp>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Percentexp_Percent:
                    // <Percent Exp> ::= <Negate Exp> '%'
                    return new PercentExpression((rLangExpression)CreateObject(reduction[0], symbolTable));

                case ProductionIndex.Percentexp:
                    // <Percent Exp> ::= <Negate Exp>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Negateexp_Minus:
                    // <Negate Exp> ::= '-' <Value>
                    return new NegateExpression((rLangExpression)CreateObject(reduction[1], symbolTable));

                case ProductionIndex.Negateexp:
                    // <Negate Exp> ::= <Value>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Value_Number:
                    // <Value> ::= Number
                    return new NumberExpression((Double)GetTerminal(reduction[0], SymbolIndex.Number));

                case ProductionIndex.Value_If_Lparen_Rparen_Then_End:
                    // <Value> ::= IF '(' <Bool Exp> ')' THEN <Bool Exp> END
                    return new ConditionalExpression(
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        (rLangExpression)CreateObject(reduction[5], symbolTable),
                        null, false
                    );

                case ProductionIndex.Value_If_Lparen_Rparen_Then_Else_End:
                    // <Value> ::= IF '(' <Bool Exp> ')' THEN <Bool Exp> ELSE <Bool Exp> END
                    return new ConditionalExpression(
                        (rLangExpression)CreateObject(reduction[2], symbolTable),
                        (rLangExpression)CreateObject(reduction[5], symbolTable),
                        (rLangExpression)CreateObject(reduction[7], symbolTable),
                        false
                    );

                case ProductionIndex.Value_If_Lparen_Rparen:
                    // <Value> ::= IF '(' <Args> ')'
                    return new ConditionalExpression((List<rLangExpression>)CreateObject(reduction[2], symbolTable));

                case ProductionIndex.Value_Identifier_Lparen_Rparen:
                    // <Value> ::= Identifier '(' <Args> ')'
                    var fxParams = (List<rLangExpression>)CreateObject(reduction[2], symbolTable);

                    return new FunctionExpression(
                        symbolTable.GetSymbol((string)GetTerminal(reduction[0], SymbolIndex.Identifier),
                            IdentifierSymbolType.Function, null, fxParams.Count, false, this.lastLine, this.lastColumn),
                            fxParams
                        );

                case ProductionIndex.Value_Identifier_Lparen_Rparen2:
                    // <Value> ::= Identifier '(' ')'
                    return new FunctionExpression(
                        symbolTable.GetSymbol((string)GetTerminal(reduction[0], SymbolIndex.Identifier),
                            IdentifierSymbolType.Function, null, 0, false, this.lastLine, this.lastColumn),
                        new List<rLangExpression>()
                    );

                case ProductionIndex.Value:
                    // <Value> ::= <RangeReference>
                    return new IdentifierExpression((IdentifierSymbol)CreateObject(reduction[0], symbolTable));

                case ProductionIndex.Value2:
                    // <Value> ::= <CellReference>
                    return new IdentifierExpression((IdentifierSymbol)CreateObject(reduction[0], symbolTable));

                case ProductionIndex.Value3:
                    // <Value> ::= <GlobalReference>
                    return new IdentifierExpression((IdentifierSymbol)CreateObject(reduction[0], symbolTable));

                case ProductionIndex.Value_Identifier:
                    // <Value> ::= Identifier
                    return new IdentifierExpression(
                        symbolTable.GetSymbol((string)GetTerminal(reduction[0], SymbolIndex.Identifier),
                            IdentifierSymbolType.Variable, null, 0, false, this.lastLine, this.lastColumn));

                case ProductionIndex.Value_Stringliteral:
                    // <Value> ::= StringLiteral
                    return new StringExpression((string)GetTerminal(reduction[0], SymbolIndex.Stringliteral));

                case ProductionIndex.Value_Lparen_Rparen:
                    // <Value> ::= '(' <Bool Exp> ')'
                    return new ParenthesesExpression((rLangExpression)CreateObject(reduction[1], symbolTable));

                case ProductionIndex.Globalreference_At_Identifier_Dot_Identifier:
                    // <GlobalReference> ::= '@' Identifier '.' Identifier

                    var definition = string.Format("{0}.{1}",
                        (string)GetTerminal(reduction[1], SymbolIndex.Identifier),
                        (string)GetTerminal(reduction[3], SymbolIndex.Identifier));

                    return symbolTable.GetSymbol(definition,
                            IdentifierSymbolType.GlobalVariable, null, 0, false, this.lastLine, this.lastColumn);

                case ProductionIndex.Globalreference_At_Identifier:
                    // <GlobalReference> ::= '@' Identifier
                    return symbolTable.GetSymbol((string)GetTerminal(reduction[1], SymbolIndex.Identifier),
                            IdentifierSymbolType.GlobalVariable, null, 0, false, this.lastLine, this.lastColumn);

                case ProductionIndex.Rangereference_Lbracket_Rbracket_Colon_Lbracket_Rbracket:
                    // <RangeReference> ::= <ColReference> '[' <RowReference> ']' ':' <ColReference> '[' <RowReference> ']'
                    var ident1 = (string)CreateObject(reduction[0], symbolTable);
                    var ident2 = (string)CreateObject(reduction[5], symbolTable);

                    var posStart = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);
                    var posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[7], symbolTable);

                    identDef = symbolTable.GetSymbol(ident1,
                        posStart.Index, posStart.IsRelative, ident2, posEnd.Index, posEnd.IsRelative,
                        this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Rangereference_Colon:
                    // <RangeReference> ::= <ColReference> ':' <ColReference>
                    var identRange1 = TryGetIdentifierRange((string)CreateObject(reduction[0], symbolTable), 0);
                    var identRange2 = TryGetIdentifierRange((string)CreateObject(reduction[2], symbolTable), int.MaxValue);

                    ident1 = identRange1.Key;
                    ident2 = identRange2.Key;

                    var rangeStart = identRange1.Value;
                    var rangeEnd = identRange2.Value;

                    identDef = symbolTable.GetSymbol(ident1, rangeStart, true, ident2, rangeEnd, true, this.lastLine, this.lastColumn);
                    return identDef;

                case ProductionIndex.Rangereference_Dollar_Number_Colon_Dollar_Number:
                    // <RangeReference> ::= <ColReference> '$' Number ':' <ColReference> '$' Number
                    ident1 = (string)GetTerminal(reduction[0], SymbolIndex.Identifier);
                    ident2 = (string)GetTerminal(reduction[4], SymbolIndex.Identifier);

                    rangeStart = (int)(double)GetTerminal(reduction[2], SymbolIndex.Number);
                    rangeEnd = (int)(double)GetTerminal(reduction[6], SymbolIndex.Number);

                    identDef = symbolTable.GetSymbol(ident1, rangeStart, false, ident2, rangeEnd, false, this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Rangereference:
                    // <RangeReference> ::= <SingleColRange>
                    return CreateObject(reduction[0], symbolTable);

                case ProductionIndex.Singlecolrange_Lbracket_Colon_Rbracket:
                    // <SingleColRange> ::= <ColReference> '[' <RowReference> ':' <RowReference> ']'
                    posStart = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);
                    posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[4], symbolTable);

                    identDef = symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable),
                            posStart.Index, posStart.IsRelative, posEnd.Index, posEnd.IsRelative, this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Cellreference_Lbracket_Rbracket:
                    // <CellReference> ::= <ColReference> '[' <RowReference> ']'
                    var pos = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);

                    identDef = symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable), IdentifierSymbolType.CellVariable,
                                    pos.Index, 0, pos.IsRelative, this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Cellreference_Dollar_Identifier:
                    // <CellReference> ::= '$' Identifier
                    identDef = symbolTable.GetSymbol((string)GetTerminal(reduction[1], SymbolIndex.Identifier), IdentifierSymbolType.CellVariable,
                                    0, 0, true, this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Assingcolrange_Lbracket_Colon_Rbracket:
                    // <AssingColRange> ::= <ColReference> '[' <RowReference> ':' <RowReference> ']'
                    posStart = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);
                    posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[4], symbolTable);

                    identDef = symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable),
                            posStart.Index, posStart.IsRelative, posEnd.Index, posEnd.IsRelative, this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Assigncell_Lbracket_Rbracket:
                    // <AssignCell> ::= <ColReference> '[' <RowReference> ']'
                    pos = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);

                    identDef = symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable), IdentifierSymbolType.CellVariable,
                                    pos.Index, 0, pos.IsRelative, this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Assigncell_Dollar_Identifier:
                    // <AssignCell> ::= '$' Identifier
                    identDef = symbolTable.GetSymbol((string)GetTerminal(reduction[1], SymbolIndex.Identifier), IdentifierSymbolType.CellVariable,
                                    null, 0, true, this.lastLine, this.lastColumn);

                    return identDef;

                case ProductionIndex.Colreference_Identifier:
                    // <ColReference> ::= Identifier
                    return GetTerminal(reduction[0], SymbolIndex.Identifier);

                case ProductionIndex.Colreference_Dollar_Identifier:
                    // <ColReference> ::= '$' Identifier
                    return GetTerminal(reduction[1], SymbolIndex.Identifier);

                case ProductionIndex.Rowreference_Number:
                    // <RowReference> ::= Number
                    return new IdentifierSymbol.Postion() {
                        Index = (int)(double)GetTerminal(reduction[0], SymbolIndex.Number),
                        IsRelative = true
                    };

                case ProductionIndex.Rowreference_Minus_Number:
                    // <RowReference> ::= '-' Number
                    return new IdentifierSymbol.Postion() {
                        Index = -(int)(double)GetTerminal(reduction[1], SymbolIndex.Number),
                        IsRelative = true
                    };

                case ProductionIndex.Rowreference_Dollar_Number:
                    // <RowReference> ::= '$' Number
                    return new IdentifierSymbol.Postion() {
                        Index = (int)(double)GetTerminal(reduction[1], SymbolIndex.Number),
                        IsRelative = false
                    };

            }  //switch

    //        switch ((ProductionIndex)reduction.Parent.TableIndex()) {

    //            case ProductionIndex.Program:
    //                // <Program> ::= <AssignList>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Program_Eq:
    //                // <Program> ::= '=' <Bool Exp>
    //                return CreateObject(reduction[1], symbolTable);

    //            case ProductionIndex.Assignlist:
    //                // <AssignList> ::= <AssignList> <Assign Exp>

    //                GOLD.Reduction assignListReduction = reduction[0].Data as GOLD.Reduction;

    //                Stack<AssignExpression> expressions = new Stack<AssignExpression>();
    //                expressions.Push((AssignExpression)CreateObject(reduction[1], symbolTable));

    //                while (assignListReduction != null) {
    //                    if ((ProductionIndex)assignListReduction.Parent.TableIndex() == ProductionIndex.Assignlist) {
    //                        expressions.Push((AssignExpression)CreateObject(assignListReduction[1], symbolTable));
    //                        assignListReduction = assignListReduction[0].Data as GOLD.Reduction;
    //                    } else {
    //                        expressions.Push((AssignExpression)CreateObject(assignListReduction[0], symbolTable));
    //                        assignListReduction = null;
    //                    }
    //                }

    //                AssignExpression retExpression = null;
    //                AssignExpression aExpression = null;
    //                while (expressions.Count > 0) {
    //                    if (aExpression == null) {
    //                        aExpression = expressions.Pop();
    //                        retExpression = aExpression;
    //                    } else if (expressions.Count > 0) {
    //                        aExpression.Next = expressions.Pop();
    //                        aExpression = (AssignExpression)aExpression.Next;
    //                    }
    //                }

    //                return retExpression;

    //            case ProductionIndex.Assignlist2:
    //                // <AssignList> ::= <Assign Exp>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Assignexp_Eq_Lbrace_Rbrace:
    //                // <Assign Exp> ::= <IdentExpression> '=' '{' <Bool Exp> '}'
    //                SymbolTable localSymbolTable = symbolTable.CreateLocalSymbolTable();
    //                return new AssignExpression(
    //                    localSymbolTable.GetSymbol((string)CreateObject(reduction[0], localSymbolTable),
    //                        IdentifierSymbolType.Variable, null, 0, false, this.lastLine, this.lastColumn),
    //                    (rLangExpression)CreateObject(reduction[3], localSymbolTable),
    //                    localSymbolTable
    //                );
    //            case ProductionIndex.Assignexp_At_Eq_Lbrace_Rbrace:
    //                // <Assign Exp> ::= '@' <IdentExpression> '=' '{' <Bool Exp> '}'
    //                localSymbolTable = symbolTable.CreateLocalSymbolTable();
    //                return new AssignExpression(
    //                        localSymbolTable.GetSymbol((string)CreateObject(reduction[1], localSymbolTable),
    //                            IdentifierSymbolType.GlobalVariable, null, 0, false, this.lastLine, this.lastColumn),
    //                        (rLangExpression)CreateObject(reduction[4], localSymbolTable),
    //                        localSymbolTable
    //                    );

    //            case ProductionIndex.Assignexp_Dollardollar_Eq_Lbrace_Rbrace:
    //                // <Assign Exp> ::= '$$' <IdentExpression> '=' '{' <Bool Exp> '}'
    //                localSymbolTable = symbolTable.CreateLocalSymbolTable();
    //                return new AssignExpression(
    //                        localSymbolTable.GetSymbol((string)CreateObject(reduction[1], localSymbolTable),
    //                            IdentifierSymbolType.GlobalVariable, null, 0, false, this.lastLine, this.lastColumn),
    //                        (rLangExpression)CreateObject(reduction[4], localSymbolTable),
    //                        localSymbolTable
    //                    );

    //            case ProductionIndex.Assignexp_Dollar_Eq_Lbrace_Rbrace:
    //                // <Assign Exp> ::= '$' <IdentExpression> '=' '{' <Bool Exp> '}'
    //                localSymbolTable = symbolTable.CreateLocalSymbolTable();
    //                return new AssignExpression(
    //                        localSymbolTable.GetSymbol((string)CreateObject(reduction[1], localSymbolTable),
    //                            IdentifierSymbolType.CellVariable, null, 0, false, this.lastLine, this.lastColumn),
    //                        (rLangExpression)CreateObject(reduction[4], localSymbolTable),
    //                        localSymbolTable
    //                    );

    //            case ProductionIndex.Assignexp_Dollar_Lbracket_Colon_Rbracket_Eq_Lbrace_Rbrace:                 
    //            // <Assign Exp> ::= '$' <IdentExpression> '[' <ColReference> ':' <ColReference> ']' '=' '{' <Bool Exp> '}'
    //                localSymbolTable = symbolTable.CreateLocalSymbolTable();

    //                var posStart = (IdentifierSymbol.Postion)CreateObject(reduction[3], localSymbolTable);
    //                var posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[5], localSymbolTable);

    //                var identDef = localSymbolTable.GetSymbol((string)CreateObject(reduction[1], localSymbolTable),
    //                                posStart.Index, posStart.IsRelative, posEnd.Index, posEnd.IsRelative, this.lastLine, this.lastColumn);

    //                return new AssignExpression(
    //                    identDef,
    //                    (rLangExpression)CreateObject(reduction[9], localSymbolTable),
    //                    localSymbolTable
    //                );

				//case ProductionIndex.Assignexp_Dollar_Lbracket_Rbracket_Eq_Lbrace_Rbrace:                 
    //            // <Assign Exp> ::= '$' <IdentExpression> '[' <ColReference> ']' '=' '{' <Bool Exp> '}'
    //                localSymbolTable = symbolTable.CreateLocalSymbolTable();

    //                var pos = (IdentifierSymbol.Postion)CreateObject(reduction[3], localSymbolTable);

    //                identDef = localSymbolTable.GetSymbol((string)CreateObject(reduction[1], localSymbolTable), IdentifierSymbolType.CellVariable,
    //                                pos.Index, 0, pos.IsRelative, this.lastLine, this.lastColumn);

    //                return new AssignExpression(
    //                    identDef,
    //                    (rLangExpression)CreateObject(reduction[7], localSymbolTable),
    //                    localSymbolTable
    //                );

    //            case ProductionIndex.Args_Comma:
    //                // <Args> ::= <Args> ',' <Bool Exp>
    //                List<rLangExpression> argsList = (List<rLangExpression>)CreateObject(reduction[0], symbolTable);
    //                argsList.Add((rLangExpression)CreateObject(reduction[2], symbolTable));
    //                return argsList;

    //            case ProductionIndex.Args:
    //                // <Args> ::= <Bool Exp>
    //                argsList = new List<rLangExpression>();
    //                argsList.Add((rLangExpression)CreateObject(reduction[0], symbolTable));
    //                return argsList;

    //            case ProductionIndex.Boolexp_And:
    //                // <Bool Exp> ::= <Bool Exp> AND <Expression>
    //                return new BooleanExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    BooleanOperator.AND
    //                );

    //            case ProductionIndex.Boolexp_Or:
    //                // <Bool Exp> ::= <Bool Exp> OR <Expression>
    //                return new BooleanExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    BooleanOperator.OR
    //                );

    //            case ProductionIndex.Boolexp_And_Lparen_Rparen:
    //                // <Bool Exp> ::= AND '(' <Args> ')'
    //                return new BooleanExpression(
    //                    (List<rLangExpression>)CreateObject(reduction[2], symbolTable),
    //                    BooleanOperator.AND
    //                );

    //            case ProductionIndex.Boolexp_Or_Lparen_Rparen:
    //                // <Bool Exp> ::= OR '(' <Args> ')'
    //                return new BooleanExpression(
    //                    (List<rLangExpression>)CreateObject(reduction[2], symbolTable),
    //                    BooleanOperator.OR
    //                );

    //            case ProductionIndex.Boolexp_Not:
    //                // <Bool Exp> ::= NOT <Expression>
    //                return new BooleanExpression(
    //                    (rLangExpression)CreateObject(reduction[1], symbolTable), null,
    //                    BooleanOperator.NOT
    //                );

    //            case ProductionIndex.Boolexp:
    //                // <Bool Exp> ::= <Expression>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Expression_Gt:
    //                // <Expression> ::= <Expression> '>' <Add Exp>
    //                return new ComparisonExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    ComparisonOperator.GT
    //                );

    //            case ProductionIndex.Expression_Lt:
    //                // <Expression> ::= <Expression> '<' <Add Exp>
    //                return new ComparisonExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    ComparisonOperator.LT
    //                );

    //            case ProductionIndex.Expression_Lteq:
    //                // <Expression> ::= <Expression> '<=' <Add Exp>
    //                return new ComparisonExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    ComparisonOperator.LTEQ
    //                );

    //            case ProductionIndex.Expression_Gteq:
    //                // <Expression> ::= <Expression> '>=' <Add Exp>
    //                return new ComparisonExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    ComparisonOperator.GTEQ
    //                );

    //            case ProductionIndex.Expression_Eq:
    //                // <Expression> ::= <Expression> '=' <Add Exp>
    //                return new ComparisonExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    ComparisonOperator.EQ
    //                );

    //            case ProductionIndex.Expression_Ltgt:
    //                // <Expression> ::= <Expression> '<>' <Add Exp>
    //                return new ComparisonExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    ComparisonOperator.NEQ
    //                );

    //            case ProductionIndex.Expression:
    //                // <Expression> ::= <Add Exp>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Addexp_Plus:
    //                // <Add Exp> ::= <Add Exp> '+' <Mult Exp>
    //                return new MathExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    MathOperator.ADD
    //                );

    //            case ProductionIndex.Addexp_Minus:
    //                // <Add Exp> ::= <Add Exp> '-' <Mult Exp>
    //                return new MathExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    MathOperator.SUBTR
    //                );

    //            case ProductionIndex.Addexp_Amp:
    //                // <Add Exp> ::= <Add Exp> '&' <Mult Exp>
    //                return new MathExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    MathOperator.CONCATENATE
    //                );

    //            case ProductionIndex.Addexp:
    //                // <Add Exp> ::= <Mult Exp>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Multexp_Times:
    //                // <Mult Exp> ::= <Mult Exp> '*' <Pow Exp>
    //                return new MathExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    MathOperator.MULT
    //                );

    //            case ProductionIndex.Multexp_Div:
    //                // <Mult Exp> ::= <Mult Exp> '/' <Pow Exp>
    //                return new MathExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    MathOperator.DIVD
    //                );

    //            case ProductionIndex.Multexp:
    //                // <Mult Exp> ::= <Pow Exp>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Powexp_Caret:
    //                // <Pow Exp> ::= <Pow Exp> '^' <Percent Exp>
    //                return new MathExpression(
    //                    (rLangExpression)CreateObject(reduction[0], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    MathOperator.POW
    //                );

    //            case ProductionIndex.Powexp:
    //                // <Pow Exp> ::= <Percent Exp>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Percentexp_Percent:
    //                // <Percent Exp> ::= <Negate Exp> '%'
    //                return new PercentExpression((rLangExpression)CreateObject(reduction[0], symbolTable));

    //            case ProductionIndex.Percentexp:
    //                // <Percent Exp> ::= <Negate Exp>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Negateexp_Minus:
    //                // <Negate Exp> ::= '-' <Value>
    //                return new NegateExpression((rLangExpression)CreateObject(reduction[1], symbolTable));

    //            case ProductionIndex.Negateexp:
    //                // <Negate Exp> ::= <Value>
    //                return CreateObject(reduction[0], symbolTable);

    //            case ProductionIndex.Value_Number:
    //                // <Value> ::= Number
    //                return new NumberExpression((Double)GetTerminal(reduction[0], SymbolIndex.Number));

    //            case ProductionIndex.Value_If_Lparen_Rparen_Then_End:                 
    //            // <Value> ::= IF '(' <Bool Exp> ')' THEN <Bool Exp> END
    //                return new ConditionalExpression(
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[5], symbolTable),
    //                    null, false
    //                );

    //            case ProductionIndex.Value_If_Lparen_Rparen_Then_Else_End:                 
    //            // <Value> ::= IF '(' <Bool Exp> ')' THEN <Bool Exp> ELSE <Bool Exp> END
    //                return new ConditionalExpression(
    //                    (rLangExpression)CreateObject(reduction[2], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[5], symbolTable),
    //                    (rLangExpression)CreateObject(reduction[7], symbolTable),
    //                    false
    //                );

    //            case ProductionIndex.Value_If_Lparen_Rparen:
    //                // <Value> ::= IF '(' <Args> ')'
    //                return new ConditionalExpression((List<rLangExpression>)CreateObject(reduction[2], symbolTable));

    //            case ProductionIndex.Value_Lparen_Rparen:
    //                // <Value> ::= <IdentExpression> '(' <Args> ')'

    //                var fxParams = (List<rLangExpression>)CreateObject(reduction[2], symbolTable);

    //                return new FunctionExpression(
    //                    symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable),
    //                        IdentifierSymbolType.Function, null, fxParams.Count, false, this.lastLine, this.lastColumn),
    //                        fxParams
    //                    );

    //            case ProductionIndex.Value_Lparen_Rparen2:
    //                // <Value> ::= <IdentExpression> '(' ')'
    //                return new FunctionExpression(
    //                    symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable),
    //                        IdentifierSymbolType.Function, null, 0, false, this.lastLine, this.lastColumn),
    //                    new List<rLangExpression>()
    //                );

    //            case ProductionIndex.Value_Dollar_Lbracket_Rbracket_Colon_Dollar_Lbracket_Rbracket:                 
    //            // <Value> ::= '$' <IdentExpression> '[' <ColReference> ']' ':' '$' <IdentExpression> '[' <ColReference> ']'

    //                var ident1 = (string)CreateObject(reduction[1], symbolTable);
    //                var ident2 = (string)CreateObject(reduction[7], symbolTable);

    //                posStart = (IdentifierSymbol.Postion)CreateObject(reduction[3], symbolTable);
    //                posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[9], symbolTable);

    //                identDef = symbolTable.GetSymbol(ident1, 
    //                    posStart.Index, posStart.IsRelative, ident2, posEnd.Index, posEnd.IsRelative, 
    //                    this.lastLine, this.lastColumn);

    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Dollar_Lbracket_Colon_Rbracket:
    //                // <Value> ::= '$' <IdentExpression> '[' <ColReference> ':' <ColReference> ']'

    //                posStart = (IdentifierSymbol.Postion)CreateObject(reduction[3], symbolTable);
    //                posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[5], symbolTable);

    //                identDef = symbolTable.GetSymbol((string)CreateObject(reduction[1], symbolTable),
    //                        posStart.Index, posStart.IsRelative, posEnd.Index, posEnd.IsRelative, 
    //                        this.lastLine, this.lastColumn);


    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Dollar_Lbracket_Rbracket:
    //                // <Value> ::= '$' <IdentExpression> '[' <ColReference> ']'

    //                pos = (IdentifierSymbol.Postion)CreateObject(reduction[3], symbolTable);

    //                identDef = symbolTable.GetSymbol((string)CreateObject(reduction[1], symbolTable), IdentifierSymbolType.CellVariable,
    //                        pos.Index, 0, pos.IsRelative, this.lastLine, this.lastColumn);

    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Lbracket_Rbracket_Colon_Identifier_Lbracket_Rbracket:                 
    //            // <Value> ::= <IdentExpression> '[' <ColReference> ']' ':' Identifier '[' <ColReference> ']'
    //                ident1 = (string)CreateObject(reduction[0], symbolTable);
    //                ident2 = (string)GetTerminal(reduction[5], SymbolIndex.Identifier);

    //                posStart = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);
    //                posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[7], symbolTable);

    //                identDef = symbolTable.GetSymbol(ident1, 
    //                    posStart.Index, posStart.IsRelative, ident2, posEnd.Index, posEnd.IsRelative, 
    //                    this.lastLine, this.lastColumn);

    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Lbracket_Colon_Rbracket:
    //                // <Value> ::= <IdentExpression> '[' <ColReference> ':' <ColReference> ']'
    //                posStart = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);
    //                posEnd = (IdentifierSymbol.Postion)CreateObject(reduction[4], symbolTable);

    //                identDef = symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable),
    //                        posStart.Index, posStart.IsRelative, posEnd.Index, posEnd.IsRelative, this.lastLine, this.lastColumn);


    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Lbracket_Rbracket:
    //                // <Value> ::= <IdentExpression> '[' <ColReference> ']'

    //                pos = (IdentifierSymbol.Postion)CreateObject(reduction[2], symbolTable);

    //                identDef = symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable), IdentifierSymbolType.CellVariable,
    //                                pos.Index, 0, pos.IsRelative, this.lastLine, this.lastColumn);

    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Dollar_Identifier_Colon_Dollar_Identifier:
    //                // <Value> ::= '$' Identifier ':' '$' Identifier

    //                var identRange1 = TryGetIdentifierRange((string)GetTerminal(reduction[1], SymbolIndex.Identifier), 0);
    //                var identRange2 = TryGetIdentifierRange((string)GetTerminal(reduction[4], SymbolIndex.Identifier), int.MaxValue);

    //                ident1 = identRange1.Key;
    //                ident2 = identRange2.Key;

    //                var rangeStart = identRange1.Value;
    //                var rangeEnd = identRange2.Value;

    //                identDef = symbolTable.GetSymbol(ident1, rangeStart, true, ident2, rangeEnd, true, this.lastLine, this.lastColumn);

    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Identifier_Colon_Identifier:
    //                // <Value> ::= Identifier ':' Identifier
    //                identRange1 = TryGetIdentifierRange((string)GetTerminal(reduction[0], SymbolIndex.Identifier), 0);
    //                identRange2 = TryGetIdentifierRange((string)GetTerminal(reduction[2], SymbolIndex.Identifier), int.MaxValue);

    //                ident1 = identRange1.Key;
    //                ident2 = identRange2.Key;

    //                rangeStart = identRange1.Value;
    //                rangeEnd = identRange2.Value;

    //                identDef = symbolTable.GetSymbol(ident1, rangeStart, true, ident2, rangeEnd, true, this.lastLine, this.lastColumn);

    //                return new IdentifierExpression(identDef);

				//case ProductionIndex.Value_Dollar_Identifier_Dollar_Number_Colon_Dollar_Identifier_Dollar_Number:
    //                // <Value> ::= '$' Identifier '$' Number ':' '$' Identifier '$' Number

    //                ident1 = (string)GetTerminal(reduction[1], SymbolIndex.Identifier);
    //                ident2 = (string)GetTerminal(reduction[6], SymbolIndex.Identifier);

    //                rangeStart = (int)(double)GetTerminal(reduction[3], SymbolIndex.Number);
    //                rangeEnd = (int)(double)GetTerminal(reduction[8], SymbolIndex.Number);

    //                identDef = symbolTable.GetSymbol(ident1, rangeStart, false, ident2, rangeEnd, false, this.lastLine, this.lastColumn);

    //                return new IdentifierExpression(identDef);

    //            case ProductionIndex.Value_Dollar:
    //                // <Value> ::= '$' <IdentExpression>
    //                return new IdentifierExpression(
    //                    symbolTable.GetSymbol((string)CreateObject(reduction[1], symbolTable),
    //                        IdentifierSymbolType.CellVariable, null, 0, true, this.lastLine, this.lastColumn));

    //            case ProductionIndex.Value_Dollardollar:
    //                // <Value> ::= '$$' <IdentExpression>
    //                return new IdentifierExpression(
    //                    symbolTable.GetSymbol((string)CreateObject(reduction[1], symbolTable),
    //                        IdentifierSymbolType.GlobalVariable, null, 0, false, this.lastLine, this.lastColumn));

    //            case ProductionIndex.Value_At:
    //                // <Value> ::= '@' <IdentExpression>
    //                return new IdentifierExpression(
    //                    symbolTable.GetSymbol((string)CreateObject(reduction[1], symbolTable),
    //                        IdentifierSymbolType.GlobalVariable, null, 0, false, this.lastLine, this.lastColumn));

    //            case ProductionIndex.Value:
    //                // <Value> ::= <IdentExpression>
    //                return new IdentifierExpression(
    //                    symbolTable.GetSymbol((string)CreateObject(reduction[0], symbolTable), 
    //                        IdentifierSymbolType.Variable, null, 0, false, this.lastLine, this.lastColumn));

    //            case ProductionIndex.Value_Stringliteral:
    //                // <Value> ::= StringLiteral
    //                return new StringExpression((string)GetTerminal(reduction[0], SymbolIndex.Stringliteral));

    //            case ProductionIndex.Value_Lparen_Rparen3:
    //                // <Value> ::= '(' <Bool Exp> ')'
    //                return new ParenthesesExpression((rLangExpression)CreateObject(reduction[1], symbolTable));

    //            case ProductionIndex.Identexpression_Identifier:
    //                // <IdentExpression> ::= Identifier
    //                return GetTerminal(reduction[0], SymbolIndex.Identifier);

				//case ProductionIndex.Colreference_Number:
    //                // <ColReference> ::= Number

    //                return new IdentifierSymbol.Postion() {
    //                    Index = (int)(double)GetTerminal(reduction[0], SymbolIndex.Number),
    //                    IsRelative = true
    //                };
	
	   //         case ProductionIndex.Colreference_Minus_Number:
    //                // <ColReference> ::= '-' Number
    //                return new IdentifierSymbol.Postion() {
    //                    Index = -(int)(double)GetTerminal(reduction[1], SymbolIndex.Number),
    //                    IsRelative = true
    //                };

    //            case ProductionIndex.Colreference_Dollar_Number:
    //                // <ColReference> ::= '$' Number
    //                return new IdentifierSymbol.Postion() {
    //                    Index = (int)(double)GetTerminal(reduction[1], SymbolIndex.Number),
    //                    IsRelative = false
    //                };

    //        }  //switch

            return result;
        }

        public KeyValuePair<string, int> TryGetIdentifierRange(string ident, int defaultRow) {

            if (ident == null || ident == string.Empty) throw new ArgumentException("identifier can't be empty");

            List<char> numChar = new List<char>(); ;
            int index = 0; 

            for (int i = ident.Length -1; i >= 0; i--) {
                char c = ident[i];
                if (char.IsDigit(c)) {
                    index = i;
                    numChar.Add(c);
                } else
                    break;
            }

            if (numChar.Count > 0) {
                numChar.Reverse();
                int num = int.Parse(new string(numChar.ToArray()));
                ident = ident.Remove(index);
                return new KeyValuePair<string, int>(ident, num);
            } else
                return new KeyValuePair<string, int>(ident, defaultRow);
        }

    }; //MyParser

}
